/*
File Name: KeyEventDemo.java
Description: This is the main driver for the game. See gamedescription.txt for
			 more details.
Author: Anthony Hansen
Email Address: hansen.tony92@gmail.com
Date Created: Tue May 27 09:55:37 PDT 2014
*/
import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.*;
import javax.swing.*;
import java.awt.event.KeyEvent;
import java.awt.*;
import java.util.Random;
 
public class KeyEventDemo extends JFrame
        implements KeyListener,
        ActionListener
{
	BlankArea displayArea;
    JTextField typingArea;
    static final String newline = System.getProperty("line.separator");
	
	int hX=1, hY=1, mX=25, mY=25,i=0;
     
    public static void main(String[] args) {
        /* Use an appropriate Look and Feel */
        try {
            //UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
            //UIManager.setLookAndFeel("com.sun.java.swing.plaf.gtk.GTKLookAndFeel");
            UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");
        } catch (UnsupportedLookAndFeelException ex) {
            ex.printStackTrace();
        } catch (IllegalAccessException ex) {
            ex.printStackTrace();
        } catch (InstantiationException ex) {
            ex.printStackTrace();
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        }
        /* Turn off metal's use of bold fonts */
        UIManager.put("swing.boldMetal", Boolean.FALSE);
		
        //Schedule a job for event dispatch thread:
        //creating and showing this application's GUI.
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }
     
    /**
     * Create the GUI and show it.  For thread safety,
     * this method should be invoked from the
     * event-dispatching thread.
     */
    private static void createAndShowGUI() {
        //Create and set up the window.
        KeyEventDemo frame = new KeyEventDemo("KeyEventDemo");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
         
        //Set up the content pane.
        frame.addComponentsToPane();
         
         
        //Display the window.
        frame.pack();
        frame.setVisible(true);
		frame.setResizable(false);
    }
     
    private void addComponentsToPane() {
         
        /*JButton button = new JButton("Clear");
        button.addActionListener(this);
         
        typingArea = new JTextField(20);
        typingArea.addKeyListener(this);*/
         
        //Uncomment this if you wish to turn off focus
        //traversal.  The focus subsystem consumes
        //focus traversal keys, such as Tab and Shift Tab.
        //If you uncomment the following line of code, this
        //disables focus traversal and the Tab events will
        //become available to the key event listener.
        //typingArea.setFocusTraversalKeysEnabled(false);
         
        displayArea = new BlankArea(Color.YELLOW);
		displayArea.addKeyListener(this);
        //displayArea.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(displayArea);
        scrollPane.setPreferredSize(new Dimension(375, 125));
		displayArea.setPreferredSize(new Dimension(530,530));
		if(i==0){
		displayArea.setValue(hX,hY, "hero");
        displayArea.setValue(mX,mY, "monster"); 
		i++;}
        /*getContentPane().add(typingArea, BorderLayout.PAGE_START);
        getContentPane().add(scrollPane, BorderLayout.CENTER);
        getContentPane().add(button, BorderLayout.PAGE_END);*/
		getContentPane().add(displayArea, BorderLayout.CENTER);
    }
     
    public KeyEventDemo(String name) {
        super(name);
    }
     
     
    /** Handle the key typed event from the text field. */
    public void keyTyped(KeyEvent e) {
        //displayInfo(e, "KEY TYPED: ");
    }
     
    /** Handle the key pressed event from the text field. */
    public void keyPressed(KeyEvent e) {
        //displayInfo(e, "KEY PRESSED: ");
    }
     
    /** Handle the key released event from the text field. */
    public void keyReleased(KeyEvent e) {
        //displayInfo(e, "KEY RELEASED: ");
		int keyCode=e.getKeyCode();
		if(keyCode==38 || keyCode==87)
		{
			displayArea.setValue(hX,hY,"off");
			if((hY-1)>0 && (hY-1)<=25) hY--;
			displayArea.setValue(hX,hY,"hero");
		}
		else if(keyCode==39 || keyCode==68)
		{
			displayArea.setValue(hX,hY,"off");
			if((hX+1)>0 && (hX+1)<=25) hX++;
			displayArea.setValue(hX,hY,"hero");
		}
		else if(keyCode==37 || keyCode==65)
		{
			displayArea.setValue(hX,hY,"off");
			if((hX-1)>0 && (hX-1)<=25) hX--;
			displayArea.setValue(hX,hY,"hero");
		}
		else if(keyCode==40 || keyCode==83)
		{
			displayArea.setValue(hX,hY,"off");
			if(((hY+1)>0 && (hY+1)<=25)) hY++;
			displayArea.setValue(hX,hY,"hero");
		}
		
		moveMonster();
		
		displayArea.repaint();
		
		int mpx=mX+1,mpy=mY+1,mnx=mX-1,mny=mY-1;
		
		if((hX==mpx||hX==mnx||hX==mX)&&(hY==mpy||hY==mny||hY==mY))
		{
			FightSimulatorMain fight=new FightSimulatorMain();
			fight.start();
		}
    }
	
	private void moveMonster()
	{
		Random r=new Random();
		int move=Math.abs(r.nextInt())%100+1;
		
		if(move<=25)
		{
			displayArea.setValue(mX,mY,"off");
			if((mY-1)>0 && (mY-1)<=25) mY--;
			displayArea.setValue(mX,mY,"monster");
		}
		else if(move>25 && move<=50)
		{
			displayArea.setValue(mX,mY,"off");
			if((mX+1)>0 && (mX+1)<=25) mX++;
			displayArea.setValue(mX,mY,"monster");
		}
		else if(move>50 && move<=75)
		{
			displayArea.setValue(mX,mY,"off");
			if((mX-1)>0 && (mX-1)<=25) mX--;
			displayArea.setValue(mX,mY,"monster");
		}
		else if(move>75 && move<=100)
		{
			displayArea.setValue(mX,mY,"off");
			if(((mY+1)>0 && (mY+1)<=25)) mY++;
			displayArea.setValue(mX,mY,"monster");
		}
		
	}
     
    /** Handle the button click. */
    public void actionPerformed(ActionEvent e) {
        //Clear the text components.
        displayArea.setText("");
        typingArea.setText("");
         
        //Return the focus to the typing area.
        typingArea.requestFocusInWindow();
    }
     
    /*
     * We have to jump through some hoops to avoid
     * trying to print non-printing characters
     * such as Shift.  (Not only do they not print,
     * but if you put them in a String, the characters
     * afterward won't show up in the text area.)
     */
    private void displayInfo(KeyEvent e, String keyStatus){
         
        //You should only rely on the key char if the event
        //is a key typed event.
        int id = e.getID();
        String keyString;
        if (id == KeyEvent.KEY_TYPED) {
            char c = e.getKeyChar();
            keyString = "key character = '" + c + "'";
        } else {
            int keyCode = e.getKeyCode();
            keyString = "key code = " + keyCode
                    + " ("
                    + KeyEvent.getKeyText(keyCode)
                    + ")";
        }
         
        int modifiersEx = e.getModifiersEx();
        String modString = "extended modifiers = " + modifiersEx;
        String tmpString = KeyEvent.getModifiersExText(modifiersEx);
        if (tmpString.length() > 0) {
            modString += " (" + tmpString + ")";
        } else {
            modString += " (no extended modifiers)";
        }
         
        String actionString = "action key? ";
        if (e.isActionKey()) {
            actionString += "YES";
        } else {
            actionString += "NO";
        }
         
        String locationString = "key location: ";
        int location = e.getKeyLocation();
        if (location == KeyEvent.KEY_LOCATION_STANDARD) {
            locationString += "standard";
        } else if (location == KeyEvent.KEY_LOCATION_LEFT) {
            locationString += "left";
        } else if (location == KeyEvent.KEY_LOCATION_RIGHT) {
            locationString += "right";
        } else if (location == KeyEvent.KEY_LOCATION_NUMPAD) {
            locationString += "numpad";
        } else { // (location == KeyEvent.KEY_LOCATION_UNKNOWN)
            locationString += "unknown";
        }
         
        System.out.println(keyStatus + newline
                + "    " + keyString + newline
                + "    " + modString + newline
                + "    " + actionString + newline
                + "    " + locationString + newline);
        //displayArea.setCaretPosition(displayArea.getDocument().getLength());
    }
}
